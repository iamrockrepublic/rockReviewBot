// Code generated by MockGen. DO NOT EDIT.
// Source: dependency.go

// Package bot_server is a generated GoMock package.
package bot_server

import (
	context "context"
	reflect "reflect"

	v5 "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	gomock "github.com/golang/mock/gomock"
)

// MockIReviewBotSvc is a mock of IReviewBotSvc interface.
type MockIReviewBotSvc struct {
	ctrl     *gomock.Controller
	recorder *MockIReviewBotSvcMockRecorder
}

// MockIReviewBotSvcMockRecorder is the mock recorder for MockIReviewBotSvc.
type MockIReviewBotSvcMockRecorder struct {
	mock *MockIReviewBotSvc
}

// NewMockIReviewBotSvc creates a new mock instance.
func NewMockIReviewBotSvc(ctrl *gomock.Controller) *MockIReviewBotSvc {
	mock := &MockIReviewBotSvc{ctrl: ctrl}
	mock.recorder = &MockIReviewBotSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIReviewBotSvc) EXPECT() *MockIReviewBotSvcMockRecorder {
	return m.recorder
}

// GetFileUrl mocks base method.
func (m *MockIReviewBotSvc) GetFileUrl(ctx context.Context, fileId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileUrl", ctx, fileId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileUrl indicates an expected call of GetFileUrl.
func (mr *MockIReviewBotSvcMockRecorder) GetFileUrl(ctx, fileId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileUrl", reflect.TypeOf((*MockIReviewBotSvc)(nil).GetFileUrl), ctx, fileId)
}

// Send mocks base method.
func (m *MockIReviewBotSvc) Send(ctx context.Context, c v5.Chattable) (v5.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, c)
	ret0, _ := ret[0].(v5.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockIReviewBotSvcMockRecorder) Send(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockIReviewBotSvc)(nil).Send), ctx, c)
}

// MockIReviewRepo is a mock of IReviewRepo interface.
type MockIReviewRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIReviewRepoMockRecorder
}

// MockIReviewRepoMockRecorder is the mock recorder for MockIReviewRepo.
type MockIReviewRepoMockRecorder struct {
	mock *MockIReviewRepo
}

// NewMockIReviewRepo creates a new mock instance.
func NewMockIReviewRepo(ctrl *gomock.Controller) *MockIReviewRepo {
	mock := &MockIReviewRepo{ctrl: ctrl}
	mock.recorder = &MockIReviewRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIReviewRepo) EXPECT() *MockIReviewRepoMockRecorder {
	return m.recorder
}

// StoreReview mocks base method.
func (m *MockIReviewRepo) StoreReview(ctx context.Context, userId int64, content ReviewContent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreReview", ctx, userId, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreReview indicates an expected call of StoreReview.
func (mr *MockIReviewRepoMockRecorder) StoreReview(ctx, userId, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreReview", reflect.TypeOf((*MockIReviewRepo)(nil).StoreReview), ctx, userId, content)
}

// MockISessionRepo is a mock of ISessionRepo interface.
type MockISessionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockISessionRepoMockRecorder
}

// MockISessionRepoMockRecorder is the mock recorder for MockISessionRepo.
type MockISessionRepoMockRecorder struct {
	mock *MockISessionRepo
}

// NewMockISessionRepo creates a new mock instance.
func NewMockISessionRepo(ctrl *gomock.Controller) *MockISessionRepo {
	mock := &MockISessionRepo{ctrl: ctrl}
	mock.recorder = &MockISessionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISessionRepo) EXPECT() *MockISessionRepoMockRecorder {
	return m.recorder
}

// SetUserSessionData mocks base method.
func (m *MockISessionRepo) SetUserSessionData(ctx context.Context, sessionData userSessionData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserSessionData", ctx, sessionData)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserSessionData indicates an expected call of SetUserSessionData.
func (mr *MockISessionRepoMockRecorder) SetUserSessionData(ctx, sessionData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserSessionData", reflect.TypeOf((*MockISessionRepo)(nil).SetUserSessionData), ctx, sessionData)
}
